[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "pymatlib"
dynamic = ["version"]
description = "A high-performance Python library for material simulation and analysis with temperature-dependent properties"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Rahil Doshi", email = "rahil.doshi@fau.de"},
]
maintainers = [
    {name = "Rahil Doshi", email = "rahil.doshi@fau.de"},
]
keywords = ["materials", "thermophysical", "properties", "yaml", "scientific-computing", "piecewise", "regression", "sympy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Materials Science",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.20.0,<3.0.0",
    "sympy>=1.9.0,<2.0.0",
    "scipy>=1.7.0,<2.0.0",
    "matplotlib>=3.5.0,<4.0.0",
    "ruamel.yaml>=0.17.0,<1.0.0",
    "pandas>=1.4.0,<3.0.0",
    "openpyxl>=3.1.5",
    "pwlf>=2.5.1,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    # "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "hypothesis>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
]
test = [
    "pytest>=7.0.0",
    # "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "hypothesis>=6.0.0",
    "pytest-benchmark>=4.0.0",
    # "pytest-timeout>=2.1.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-autodoc-typehints>=1.20.0",
    "sphinx-copybutton>=0.5.0",
]
performance = [
    "line_profiler>=4.0.0",
    "memory_profiler>=0.60.0",
    "pytest-benchmark>=4.0.0",
]
simulation = [
    "pystencils>=1.3.0",
]
all = [
    "pymatlib[dev,test,docs,performance,simulation]"
]

[project.urls]
Homepage = "https://i10git.cs.fau.de/rahil.doshi/pymatlib"
Repository = "https://i10git.cs.fau.de/rahil.doshi/pymatlib"
"Bug Tracker" = "https://i10git.cs.fau.de/rahil.doshi/pymatlib/-/issues"
Documentation = "https://i10git.cs.fau.de/rahil.doshi/pymatlib/-/wikis/home"
Changelog = "https://i10git.cs.fau.de/rahil.doshi/pymatlib/-/blob/master/CHANGELOG.md"

[project.scripts]
pymatlib-validate = "pymatlib.parsing.api:validate_yaml_file"

[tool.setuptools.packages.find]
where = ["src"]
include = ["pymatlib*"]
exclude = ["tests*", "apps*", "examples*"]

[tool.setuptools.package-data]
pymatlib = [
    "data/**/*",
    "data/alloys/**/*",
    "data/pure_metals/**/*",
    "*.yaml",
    "*.yml",
    "*.json",
    "*.xlsx",
    "*.csv",
    "*.txt",
    "py.typed",
]

# Add setuptools_scm configuration for dynamic versioning
[tool.setuptools_scm]
write_to = "src/pymatlib/_version.py"
version_scheme = "python-simplified-semver"
local_scheme = "node-and-date"
fallback_version = "0.2.0"

[tool.pytest.ini_options]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    # "--cov=src/pymatlib",
    # "--cov-report=html:tests/htmlcov",
    # "--cov-report=term-missing",
    # "--cov-fail-under=85",
    "--tb=short",
]
testpaths = ["tests"]
pythonpath = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions",
    "regression: Regression tests for bug fixes",
    "slow: Slow tests that may take significant time",
    "performance: Performance benchmark tests",
    "property_based: Property-based tests using hypothesis",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:matplotlib.*",
]
# timeout = 300

# COMPLETELY REMOVED ALL COVERAGE SECTIONS
# [tool.coverage.run]
# source = ["pymatlib"]
# omit = [
#     "*/tests/*",
#     "*/test_*",
#     "*/__pycache__/*",
#     "*/apps/*",
#     "*/examples/*",
#     "*/_version.py",
#     "*/conftest.py",
# ]
# branch = true

# [tool.coverage.report]
# exclude_lines = [
#     "pragma: no cover",
#     "def __repr__",
#     "def __str__",
#     "raise AssertionError",
#     "raise NotImplementedError",
#     "if __name__ == .__main__.:",
#     "if TYPE_CHECKING:",
#     "class .*\\bProtocol\\):",
#     "@(abc\\.)?abstractmethod",
#     "pass",
#     "\\.\\.\\.",
# ]
# show_missing = true
# skip_covered = false
# precision = 2

# [tool.coverage.html]
# directory = "tests/htmlcov"

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | apps/cmake-build-.*
  | apps/walberla
  | apps/sfg-walberla
  | _version\.py
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip_glob = ["*/_version.py"]
known_first_party = ["pymatlib"]
known_third_party = [
    "numpy",
    "sympy",
    "scipy",
    "matplotlib",
    "pandas",
    "pytest",
    "hypothesis",
    "pwlf",
    "ruamel",
    "openpyxl",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "pwlf.*",
    "pystencils.*",
    "ruamel.*",
    "matplotlib.*",
    "scipy.*",
    "pandas.*",
    "openpyxl.*",
    "pytest.*",
    "hypothesis.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pymatlib._version"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
line-length = 120
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "DJ",  # flake8-django
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific rules
]
ignore = [
    "E203",   # whitespace before ':'
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "S101",   # use of assert detected
    "S311",   # standard pseudo-random generators are not suitable for security/cryptographic purposes
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "C901",   # function is too complex
    "FBT001", # boolean positional arg in function definition
    "FBT002", # boolean default positional argument in function definition
    "A003",   # builtin-attribute-shadowing
    "N806",   # variable in function should be lowercase
    "SIM108", # use ternary operator instead of if-else-block
    "TRY003", # avoid specifying long messages outside the exception class
    "EM101",  # exception must not use a string literal, assign to variable first
    "EM102",  # exception must not use an f-string literal, assign to variable first
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
    "_version.py",
    "apps/cmake-build-*",
    "apps/walberla",
    "apps/sfg-walberla",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # Allow unused imports in __init__.py
"tests/*" = [
    "B011",    # Allow assert False in tests
    "S101",    # Allow assert in tests
    "PLR2004", # Allow magic values in tests
    "ANN",     # Don't require type annotations in tests
    "D",       # Don't require docstrings in tests
    "FBT",     # Allow boolean traps in tests
    "ARG",     # Allow unused arguments in test fixtures
]
"conftest.py" = ["F401", "F403"]  # Allow unused imports in conftest.py

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pylint]
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
